name: Trust Vault CI

env:
  GO_VERSION: '1.25'

on:
  push:
    branches: [ main, master, dev, feature, release ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master, dev, feature, release ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up golang
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Download dependencies
        run: go mod download
      - name: Build
        run: go build -v ./...

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up golang
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Download dependencies
        run: go mod download
      - name: Run test
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  lint:
    name: Lint
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up golang
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Run lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m --config=.golangci.yml

  security-scan:
    name: Security Scan
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Run security scanner
        uses: securego/gosec@master
        with:
          args: ./...

  benchmarks:
    name: Benchmarks
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up golang
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Run test bench
        run: go test -bench=. -benchmem ./...

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, test, lint, security-scan]
    if: startsWith(github.ref, 'refs/tags/v') && github.base_ref == '' && github.ref_type == 'tag'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Build binaries
        run: |
          mkdir -p dist
          # Windows 64-bit
          GOOS=windows GOARCH=amd64 go build -o dist/trustvault-windows-amd64.exe ./...
          # Windows 32-bit
          GOOS=windows GOARCH=386 go build -o dist/trustvault-windows-386.exe ./...
          # macOS Intel
          GOOS=darwin GOARCH=amd64 go build -o dist/trustvault-darwin-amd64 ./...
          # macOS Apple Silicon
          GOOS=darwin GOARCH=arm64 go build -o dist/trustvault-darwin-arm64 ./...
      - name: Upload release binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}